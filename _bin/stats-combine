#!/usr/bin/php -d memory_limit=8G
<?php
declare(strict_types=1);
require_once __DIR__.'/../_inc/lib.php';

if (empty($argv[1]) || !array_key_exists($argv[1], $GLOBALS['-corpora'])) {
	die("No such language: {$argv[1]}\n");
}

@unlink("{$GLOBALS['CORP_ROOT']}/stats/tmp-{$argv[1]}.sqlite");
$db = new \TDC\PDO\SQLite("{$GLOBALS['CORP_ROOT']}/stats/tmp-{$argv[1]}.sqlite");

$db->exec("PRAGMA journal_mode = delete");
$db->exec("PRAGMA page_size = 65536");
$db->exec("VACUUM");

$db->exec("PRAGMA auto_vacuum = INCREMENTAL");
$db->exec("PRAGMA case_sensitive_like = ON");
$db->exec("PRAGMA foreign_keys = OFF");
$db->exec("PRAGMA ignore_check_constraints = ON");
$db->exec("PRAGMA journal_mode = MEMORY");
$db->exec("PRAGMA locking_mode = EXCLUSIVE");
$db->exec("PRAGMA synchronous = OFF");
$db->exec("PRAGMA threads = 4");
$db->exec("PRAGMA trusted_schema = OFF");

$db->exec("CREATE TABLE counts (
	c_which TEXT NOT NULL,
	c_total REAL NOT NULL DEFAULT 0.0,
	c_words REAL NOT NULL DEFAULT 0.0,
	c_numbers REAL NOT NULL DEFAULT 0.0,
	c_alnums REAL NOT NULL DEFAULT 0.0,
	c_puncts REAL NOT NULL DEFAULT 0.0,
	c_emojis REAL NOT NULL DEFAULT 0.0,
	c_other REAL NOT NULL DEFAULT 0.0,
	PRIMARY KEY (c_which)
) WITHOUT ROWID");
$db->query("INSERT INTO counts (c_which) VALUES ('total')");

$total = 0;
$totals = [];
foreach ($GLOBALS['-corpora'][$argv[1]] as $corp => $c) {
	if ($c['percent_combo'] <= 0.0001) {
		continue;
	}
	$db->query("ATTACH '{$GLOBALS['CORP_ROOT']}/corpora/{$corp}/meta/stats.sqlite' AS db_corp");
	$totals[$corp] = intval($db->prepexec("SELECT c_words + c_numbers + c_alnums as cnt FROM db_corp.counts WHERE c_which = 'total'")->fetchAll()[0]['cnt']);
	$total += $totals[$corp];

	$db->query("DETACH db_corp");
}

$fact_total = 0;
foreach ($GLOBALS['-corpora'][$argv[1]] as $corp => $c) {
	if ($c['percent_combo'] <= 0.0001) {
		continue;
	}
	if ($totals[$corp] == 0) {
		continue;
	}
	$factor = ($c['percent_combo'] / 100.0) / ($totals[$corp] / floatval($total));
	fprintf(STDERR, "{$corp}: ({$c['percent_combo']} / 100) / ({$totals[$corp]} / {$total}) = {$factor}\n");

	$db->query("ATTACH '{$GLOBALS['CORP_ROOT']}/corpora/{$corp}/meta/stats.sqlite' AS db_corp");
	$db->query("UPDATE counts AS ci SET
		c_total = ci.c_total + (co.c_total * {$factor}),
		c_words = ci.c_words + (co.c_words * {$factor}),
		c_numbers = ci.c_numbers + (co.c_numbers * {$factor}),
		c_alnums = ci.c_alnums + (co.c_alnums * {$factor}),
		c_puncts = ci.c_puncts + (co.c_puncts * {$factor}),
		c_emojis = ci.c_emojis + (co.c_emojis * {$factor}),
		c_other = ci.c_other + (co.c_other * {$factor})
		FROM (SELECT * FROM db_corp.counts WHERE c_which = 'total') AS co");

	foreach (['word', 'lex', 'word_lc', 'lex_lc', 'word_nd', 'lex_nd'] as $f) {
		fprintf(STDERR, "Importing %s %s\n", $corp, $f);
		$db->beginTransaction();
		$db->exec("CREATE TABLE IF NOT EXISTS freq_total_{$f} (
			f_text TEXT NOT NULL,
			f_abs REAL NOT NULL,
			f_rel REAL NOT NULL DEFAULT 0.0,
			PRIMARY KEY (f_text)
		) WITHOUT ROWID");
		//$db->query("INSERT INTO freq_total_{$f} AS fi (f_text, f_abs) SELECT f_text, f_abs FROM db_corp.freq_total_{$f} AS fo WHERE true ON CONFLICT(f_text) DO UPDATE SET f_abs = fi.f_abs + fo.f_abs");
		$ins = $db->prepare("INSERT INTO freq_total_{$f} (f_text, f_abs) VALUES (?, ?) ON CONFLICT(f_text) DO UPDATE SET f_abs = f_abs + ?");
		$res = $db->prepexec("SELECT f_text, f_abs FROM db_corp.freq_total_{$f}");
		while ($row = $res->fetch()) {
			$ins->execute([$row['f_text'], $row['f_abs'] * $factor, $row['f_abs'] * $factor]);
		}
		$db->commit();
	}

	$db->query("DETACH db_corp");
}

$tbs = $db->prepexec("SELECT * FROM counts")->fetchAll();
foreach ($tbs as $tb) {
	$ws = floatval(intval($tb['c_words']) + intval($tb['c_numbers']) + intval($tb['c_alnums']));
	$scaled = $GLOBALS['-scale'] / $ws;
	foreach (['word', 'lex', 'word_lc', 'lex_lc', 'word_nd', 'lex_nd'] as $f) {
		$db->beginTransaction();
		fprintf(STDERR, "Table %s %s\n", $tb['c_which'], $f);
		// Delete values below 1 so they get the default frequency instead of being further punished
		$db->prepexec("DELETE FROM freq_{$tb['c_which']}_{$f} WHERE f_abs < 1.0");
		$db->prepexec("UPDATE freq_{$tb['c_which']}_{$f} SET f_rel = CAST(f_abs AS REAL) * ?", [$scaled]);
		$db->commit();
	}
}

fprintf(STDERR, "Vacuum\n");
$db->exec("VACUUM");
$db->exec("PRAGMA locking_mode = NORMAL");

@unlink("{$GLOBALS['CORP_ROOT']}/stats/{$argv[1]}.sqlite");
rename("{$GLOBALS['CORP_ROOT']}/stats/tmp-{$argv[1]}.sqlite", "{$GLOBALS['CORP_ROOT']}/stats/{$argv[1]}.sqlite");
